<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       		http://www.springframework.org/schema/beans/spring-beans.xsd 
       		http://www.springframework.org/schema/context 
       		http://www.springframework.org/schema/context/spring-context.xsd 
       		http://www.springframework.org/schema/tx 
       		http://www.springframework.org/schema/tx/spring-tx.xsd
       		http://www.springframework.org/schema/mvc
       		http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 配置扫描的包 -->
    <context:component-scan base-package="com.quansu.controller"/>
    <!-- 注册HandlerMapper、HandlerAdapter两个映射类 -->
    <mvc:annotation-driven/>
    <!-- 访问静态资源 (这个标签起作用的前提就是需要我们把静态资源放在webapp下，而非WEB-INF下，否则还是会无效)-->
    <!--default-servlet-handler将在SpringMVC上下文中定义一个DefaultServletHttpRequestHandler,它会对进入DispatcherServlet的请求进行筛查。-->
    <!--如果没有只有这个标签没有<mvc:annotation-driven/>时就会出现无法访问Controller中的@RequestMapping详解：https://blog.csdn.net/wu9333/article/details/70859860-->
    <mvc:default-servlet-handler/>
    <!-- 处理静态资源 -->

    <!-- 消息转换器 -->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">

            <!-- 字符串消息转换器 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter"/>

            <!-- json消息转换器 -->
            <bean id="mappingJacksonHttpMessageConverter"
                  class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes" value="text/html;charset=UTF-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>


    <!-- 视图解析器1:Jsp视图解析器(可多个) Controller处理完毕后将会转发到相应位置 prefix前缀 suffi后缀 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--自定义视图检查器， 多个试图多个bean，多个视图检查器-->
        <property name="viewClass" value="com.quansu.view.HtmlResourceView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
        <property name="order" value="0"/>
    </bean>
    <!-- 视图解析器2:text视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--自定义视图检查器， 多个试图多个bean，多个视图检查器-->
        <property name="viewClass" value="com.quansu.view.HtmlResourceView"/>
        <property name="prefix" value="/"/>
        <property name="suffix" value=".text"/>
        <property name="order" value="1"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
    </bean>
    <!--视图解析器3:html视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 所有视图都不匹配就找这一个，不过优先级一定要设为最低，不然视图不会向后继续检查-->
        <!-- 如有三个视图，这个视图为1优先级，那么为二的就不会被检测 0 最高 。。-->
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/"/>
        <property name="suffix" value=".html"/>
        <property name="order" value="2"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
    </bean>

    <!-- springMVC拦截器配置 -->
    <mvc:interceptors>
        <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法  -->
        <!--对所有的请求记性拦截开始-->
        <!--查看访问信息-->
        <bean class="com.quansu.interceptor.GlobalInterceptor"/>
        <!--权限管理类-->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <!--            <mvc:exclude-mapping path=""/>-->
            <bean class="com.quansu.interceptor.PermissionManagerInterceptor"/>
        </mvc:interceptor>
        <!--对所有的请求记性拦截结束-->
        <!--对特定的请求进行拦截-->
        <!--使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求-->
        <!--<bean class="com.UserInterceptor"/>-->
        <!--对于springmvc4.0以下版本放行一些特殊请求， 利用拦截所有请求处理中对一些请求放行，请求设置在<list><value>这里写放行请求</value></list>， 4.0以上使用<mvc:exclude-mapping path="/index.html"/>-->
        <!--        <mvc:interceptor>-->
        <!--定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的-->
        <!--/**为拦截所有请求-->
        <!--/**的意思是所有文件夹及里面的子文件夹-->
        <!--/*是所有文件夹，不含子文件夹-->
        <!--/是web项目的根目录-->
        <!--            <mvc:mapping path="/**"/>-->
        <!-- 不进行拦截 -->
        <!--            <mvc:exclude-mapping path="/index.html"/>-->
        <!--定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的-->
        <!--            <bean class="com.quansu.interceptor.CardOperationInterceptor"/>-->
        <!--        </mvc:interceptor>-->
        <!--拦截一些特殊请求-->
        <!--        <mvc:interceptor>-->
        <!--            <mvc:mapping path="/cardEdit/**"/>-->
        <!--            <mvc:mapping path="/user/**"/>-->
        <!--            <mvc:mapping path="/filePlateOperation/**"/>-->
        <!--            <mvc:mapping path="/blogsOperation/**"/>-->
        <!--定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的-->
        <!--            <bean class="com.quansu.interceptor.CardOperationInterceptor"/>-->
        <!--        </mvc:interceptor>-->
    </mvc:interceptors>

    <!-- SpringMVC上传文件时,需配置MultipartResolver处理器 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 指定所上传文件的总大小不能超过3G......注意maxUploadSize属性的限制不是针对单个文件,而是所有文件的容量之和 -->
        <property name="maxUploadSize" value="3000000000"/>
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- 上传文件的解析 -->
        <property name="resolveLazily" value="true"/>
    </bean>
</beans>
